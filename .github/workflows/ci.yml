name: CI

on:
  pull_request:
    branches:
      - '*'
  push:
    branches: 
      - '*'

env:
  DOCKER_REPO: butt

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install dependencies
        run: bundle install

      - name: Verify Ruby installation
        run: ruby -v
      
      - name: Set execute permissions for Brakeman
        run: chmod +x bin/brakeman

      # Uncomment and configure this step as needed
      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager
      
      # - name: scan_ruby
      #   run: echo 'scan_ruby ok'
  
  lint:
    runs-on: ubuntu-latest
    needs: scan_ruby
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      # Uncomment and configure this step as needed
      - name: Lint code for consistent style
        run: bin/rubocop -f github
      
      # - name: lint
      #   run: echo 'lint ok'
  
  build-docker:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:latest
  
  test:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull Docker Image
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:latest

      - name: Run tests in Docker
        run: |
          echo 'Run tests in Docker' 
      # docker run --rm ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:latest bundle exec rspec
      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
            name: screenshots
            path: ${{ github.workspace }}/tmp/screenshots
            if-no-files-found: ignore
  